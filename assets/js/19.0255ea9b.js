(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{390:function(t,v,_){"use strict";_.r(v);var s=_(25),a=Object(s.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"인덱스-활용하기"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#인덱스-활용하기"}},[t._v("#")]),t._v(" 인덱스 활용하기")]),t._v(" "),_("h2",{attrs:{id:"첫-임무"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#첫-임무"}},[t._v("#")]),t._v(" 첫 임무")]),t._v(" "),_("p",[t._v("회사에 입사하고 개발자로서 내게 주어진 첫 임무는 "),_("a",{attrs:{href:"https://labs.go.kr",target:"_blank",rel:"noopener noreferrer"}},[t._v("국가연구안전정보시스템"),_("OutboundLink")],1),t._v("의 유해인자 관리 모듈 및 웹 페이지를 구축하는 것이였다. "),_("s",[t._v("AI한다며")]),t._v(" 기존의 스마트 잭이 보유한 화학 물질 관리 모듈 및 서비스의 일부를 차용하여 웹 페이지를 만드는 임무였는데, 문제는 예전에 본 시스템을 구축했던 SI업체에서 만들어 놓은 유해인자 관리프로그램의 DB와 호환이 되도록 이를 migration하는 것이었다. DB의 통합은 둘째 치고 쿼리 성능 걱정할 정도의 데이터를 다뤄보지 않은 나에게 억대 단위의 데이터 호환을 고려하여 DB를 설계하고 페이지를 구축하는 것은 "),_("s",[t._v("처음부터 DB 설계가 꼬여있었기에")]),t._v(" 꽤나 묵직한 주제였고, 이에 쿼리 성능을 개선시키고자 공부했던 흔적 중 index의 활용에 대해 기록해보고자 한다.")]),t._v(" "),_("p",[_("img",{attrs:{src:"/images/labs.PNG",alt:"국가연구안전정보시스템"}})]),_("p",{attrs:{align:"middle"}},[t._v("\n국가연구안전정보시스템\n")]),_("p"),t._v(" "),_("h2",{attrs:{id:"기본-이론"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#기본-이론"}},[t._v("#")]),t._v(" 기본 이론")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),_("p",[t._v("인덱스는 조회를 위한 개념이다.")])]),t._v(" "),_("p",[t._v("인덱스를 순수 한국말로 풀이하면 '색인' 이라는 의미를 담고 있다. 어떤 책을 주고 특정 내용을 찾는 상황에 직면해있다고 가정해보자. 당신이라면 어떻게 하겠는가? 혹시 "),_("strong",[t._v('"몇 페이지?"')]),t._v(", "),_("strong",[t._v('"어느 챕터?"')]),t._v(" 라는 질문을 머리속에 하고 있지는 않은가? 만약 그렇다면 당신은 본능적으로 색인을 찾는 습관을 가지고 있는 것이다. 그 색인이 페이지 번호가 되었든, 목차가 되었든 우리는 특정 색인을 생각하지 않고는 책의 내용을 빠르게 찾을 수 없다.")]),t._v(" "),_("p",[_("img",{attrs:{src:"/images/index.jpg",alt:"index"}})]),_("p",{attrs:{align:"middle"}},[t._v("\n인덱스의 가장 흔한 예, 목차\n")]),_("p"),t._v(" "),_("h2",{attrs:{id:"색인-인덱스-의-장점-및-단점"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#색인-인덱스-의-장점-및-단점"}},[t._v("#")]),t._v(" 색인(인덱스)의 장점 및 단점")]),t._v(" "),_("p",[t._v("색인을 통해 원하는 내용을 빨리 찾을 수 있는 데에는 두 가지 이유가 있다.")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("색인(인덱스)의 장점")]),t._v(" "),_("ol",[_("li",[t._v("데이터가 "),_("strong",[t._v("예측 가능한 위치")]),t._v("에 있다.")]),t._v(" "),_("li",[t._v("데이터가 순서대로 "),_("strong",[t._v("정렬")]),t._v(" 되어있다.")])])]),t._v(" "),_("p",[t._v("그 중 첫번째는 데이터가 항상 예측 가능한 위치에 존재한다는 점이다. "),_("strong",[t._v("페이지 번호가 페이지마다 랜덤한 위치에 쓰여있다면 빠르게 내용을 찾을 수 있을까?")]),t._v(" 페이지번호는 항상 그 자리에 있어야 제 성능을 발휘한다. 목차 또한 마찬가지다. 목차가 정해진 위치(보통 맨 앞 혹은 맨 뒤)에 있지 않고 랜덤한 페이지에 나타난다면 목차를 제대로 참조할 수 있을까? 이처럼 색인의 특징 중 하나는 데이터가 예측 가능한 위치에 정리되어있다는 점이다.")]),t._v(" "),_("p",[t._v("두 번째는 데이터가 정렬되어있다는 점이다. "),_("strong",[t._v("페이지 번호가 불규칙하게 쓰여진 책에서 내용을 제대로 찾을 수 있을까?")]),t._v(" "),_("strong",[t._v("목차가 불규칙한 기준으로 나열되어있을 경우에는?")]),t._v(" 이는 프로그래밍적 개념에도 고스란히 적용 된다.")]),t._v(" "),_("p",[_("img",{attrs:{src:"/images/binary.jpg",alt:"index"}})]),_("p",{attrs:{align:"middle"}},[t._v("\n데이터가 정렬되어있을 경우, 데이터를 찾는 속도는 데이터를 정렬시키는 속도에 수렴한다.\n")]),_("p"),t._v(" "),_("p",[t._v("알고리즘 중 이진 알고리즘에 대해 들어봤을 것이다. 이 알고리즘은 "),_("strong",[t._v("정렬된 데이터")]),t._v(" 에서만 사용할 수 있으며, 한번의 순회당 필요 순회수가 2의 -n승으로 낮아지는 강력한 특징이 있기 때문에, 알고리즘을 배울 때 데이터를 빠르게 정렬하는 방법부터 배우는 것은 이러한 실무적 니즈에서 비롯된 것이다. 그만큼 데이터가 정렬되어있다는 것은 검색 속도적인면에서 압도적 우위를 가져갈 수 있기에 매우 중요한 정보이며, 우리는 이 정렬된 데이터를 하나의 컬럼에 저장함으로써, 실 생활에서의 목차 혹은 색인 처럼 정해진 위치에 정렬된 데이터에 빠르게 접근할 수 있게 되는 것이다.")]),t._v(" "),_("p",[t._v("색인을 통해 얻는 단점은 실생활의 예로써 바로 유추 가능하다. 책의 내용을 수정해야 할 경우, 목차가 같이 수정되지 않으면 그 목차는 쓸모가 없어진다. 즉, 데이터의 추가, 수정 및 삭제의 속도가 느려지게 된다는 것을 직관적으로 알 수 있다.")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("색인(인덱스)의 단점")]),t._v(" "),_("p",[t._v("조회를 제외한 모든 테이블 작업의 속도가 느려진다")])]),t._v(" "),_("h2",{attrs:{id:"인덱스의-종류"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#인덱스의-종류"}},[t._v("#")]),t._v(" 인덱스의 종류")]),t._v(" "),_("p",[_("code",[t._v("B Tree")]),t._v(", "),_("code",[t._v("B+ Tree")]),t._v(", "),_("code",[t._v("BITMAP 인덱스")]),t._v(" 등은 모두 데이터가 어떻게 정렬되어있고 어떻게 찾는지에 대한 방법들로 구분한 것이라 보면 된다. 가장 대중적인 "),_("s",[t._v("Oracle에서 쓰이는")]),t._v(" 인덱스는 "),_("code",[t._v("B+ TREE")]),t._v("인덱스이다. "),_("code",[t._v("B+ Tree")]),t._v("인덱스는 leaf 노드에 데이터가 저장되어있고 block노드에서 branch block을 찾은 뒤 leaf 노드에 접근하는 방식이다. "),_("code",[t._v("count(distinct data)")]),t._v("가 많을 때 위력을 발휘한다. DB 이론서에는 B+ Tree인덱스를 기준으로 설명한다. 실무에 가장 가깝기 때문이다. 데이터를 전문적으로 다루는 직업이 아니라면 "),_("code",[t._v("B+ Tree")]),t._v("는 "),_("code",[t._v("B Tree")]),t._v("의 개선버전이라고 그냥 퉁 치고, "),_("code",[t._v("bitmap")]),t._v("인덱스는 쓸 일이 없을것이라 간주해도 무방하다. 어떤 방식의 인덱스를 쓸 지 지정하지 않으면 "),_("code",[t._v("B-Tree")]),t._v(" 계열 인덱스가 기본으로 지정된다. (추후 추가 예정)")]),t._v(" "),_("h2",{attrs:{id:"인덱스-설계의-데이터과학적-의미"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#인덱스-설계의-데이터과학적-의미"}},[t._v("#")]),t._v(" 인덱스 설계의 데이터과학적 의미")]),t._v(" "),_("p",[t._v("DB를 설계할 때, 인덱스를 고려하는 것은 이와 같이 정렬된 데이터를 어떻게 관리하느냐에 달려있다. 즉 "),_("strong",[t._v("책을 쓴다고 가정하고, 목차를 어디까지 자세히 쓰면 좋을지에 대해 고민을 하고 그에 맞게 직관적으로 설계한다면 꽤 괜찮은 인덱스를 설계할 수 있을 것이다.")])]),t._v(" "),_("p",[_("img",{attrs:{src:"/images/phonebook.jpg",alt:"index"}})]),_("p",{attrs:{align:"middle"}},[t._v("\n지금은 사라진 전화번호부, "),_("s",[t._v("아아.. 세월의 흔적이여")]),t._v(" 😱\n")]),_("p"),t._v(" "),_("p",[t._v("동네 맛집 전화번호부를 설계한다고 가정하고, 목차에 어떤 색인을 넣으면 좋을지 생각해보자. (전화번호부는 한 페이지당 하나의 전화번호를 가지고 있다.) 어떤 색인이 좋을까? 대부분 "),_("strong",[t._v("지역")]),t._v(","),_("strong",[t._v("메뉴")]),t._v(" 및 "),_("strong",[t._v("업체명")]),t._v(" 을 떠올릴 것이고, 그 다음은 "),_("strong",[t._v("전화번호")]),t._v("가 될 것이다. 하지만 아직 빠뜨린 것이 있다. "),_("strong",[t._v("페이지 번호")]),t._v(" 가 존재해야만 목차가 의미 있게 된다. 지역, 업체명, 전화번호, 페이지 번호 모두 좋은 인덱스 대상이다.")]),t._v(" "),_("p",[t._v("이제 인덱스간 중요도를 생각해보자. "),_("strong",[t._v("지역")]),t._v(" 별로 묶이기만 하고 모든 것이 랜덤인 것이 좋을까 아니면 "),_("strong",[t._v("전화번호")]),t._v(" 순서대로 나열하는 것이 더 효과적일까? 직관적으로는 "),_("strong",[t._v("메뉴")]),t._v(" 대로 나누는 것이 가장 효과적일 것이다. 전화번호를 이미 알고 있는 상황에서 그 전화번호가 어떤 메뉴를 파는지 찾는 사람은 없기 때문이다. 동네 맛집 전화번호부라면 "),_("strong",[t._v("사용자")]),t._v("가 가장 중요하게 생각하는 정보가 무엇일까? 바로 "),_("strong",[t._v("메뉴")]),t._v("일 것이다. 여러분들도 그렇지 않은가?")]),t._v(" "),_("p",[t._v("전화번호부를 메뉴별로 목차를 만든다면 어떤 쿼리가 쓰여질까?")]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("SELECT * FROM PHONE_BOOK WHERE MENU='한식';\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br")])]),_("p",[t._v("그렇다. 인덱스는 WHERE 절(혹은 순회가 필요한 구문)에서 검색 위력을 발휘한다. 이 테이블의 Primary Key는 무엇일까? 우리는 직관적으로 "),_("strong",[t._v("전화번호")]),t._v("임을 알 수가 있다. 한 업체는 하나의 전화번호만 가지기 때문이다. 그렇다면 "),_("strong",[t._v("페이지 번호")]),t._v("는 무엇일까? "),_("strong",[t._v("전화번호가 Primary Key라면, 페이지 번호는 전화번호의 인덱스이다.")]),t._v(" 정리하면 다음과 같다.")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("인덱스 설계의 주의사항")]),t._v(" "),_("ol",[_("li",[t._v("인덱스는 어떤 컬럼이 자주 쓰일 지를 예측하여 설계해야 한다.")]),t._v(" "),_("li",[t._v("인덱스는 순회(주로 WHERE 절)에서 위력을 발휘한다.")]),t._v(" "),_("li",[t._v("모든 기본키 컬럼은 인덱스를 함께 가지고 있다.")])])]),t._v(" "),_("p",[t._v("아직 논점이 말끔하게 정리되지 않았다. 다시 원점으로 돌아와서, 어떤 컬럼에 인덱스를 쓰는 것이 가장 좋을까? 인덱스의 나쁜 예를 생각해보자. DB이론서에는 where절의 도메인이 적을 수록 나쁜 인덱스, 많을 수록 좋은 인덱스라고 하지만, 본인은 이것이 약간 과장된 이야기라고 생각한다. "),_("strong",[t._v("배달비 있음/없음")]),t._v("과 같이 2개의 도메인만 가지고 있더라도 사용자의 선택에 중요한 영향을 끼칠 경우 그 인덱스가 훌륭하다곤 할 수 없지만 딱히 인덱스의 나쁜 예라고 볼 수는 없다. "),_("s",[t._v("하지만 시험에 나온다면 나쁜 예라고 해줘야 한다")])]),t._v(" "),_("div",{staticClass:"custom-block warning"},[_("p",{staticClass:"custom-block-title"},[t._v("바람직하지 못한 인덱스의 필요충분조건")]),t._v(" "),_("ol",[_("li",[t._v("사용자가 실제로 쓰지 않는다.")]),t._v(" "),_("li",[t._v("WHERE 절의 도메인이 적다.")])])]),t._v(" "),_("p",[t._v("책 얘기로 돌아가서, 목차에 "),_("strong",[t._v("서비스 있음/없음")]),t._v("과 같이 2개의 도메인만 가지고 있는 컬럼이 인덱스 처리되어있다고 생각해보자. 이는 사용자들이 자주 쓸 법한 컬럼이 아닐 뿐더러 괜히 목차의 공간만 낭비하게 된다.")]),t._v(" "),_("h2",{attrs:{id:"인덱스-설계의-물리적-의미"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#인덱스-설계의-물리적-의미"}},[t._v("#")]),t._v(" 인덱스 설계의 물리적 의미")]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("CREATE (UNIQUE) INDEX 인덱스이름 ON 테이블명(컬럼명, 컬럼명 ...);\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br")])]),_("p",[t._v("여기서 UNIQUE는 컬럼의 unique constraint와 같은 의미이다. 즉, 중복된 데이터가 있으면 유일한 인덱스를 만들 수 없다는 의미이다. 하지만 중복된 데이터가 없는 컬럼에 unique index를 만들 수 없는 것은 아니다. 깊게 생각하면 복잡해진다. 전화번호부와 목차만 기억하자. 꽤 높은 수준까지 설계의 완성도를 보장할 것이다.")]),t._v(" "),_("p",[_("img",{attrs:{src:"/images/delivery.jpg",alt:"index"}})]),_("p",{attrs:{align:"middle"}},[t._v("\n아무런 인덱스가 없는 데이터는 배달책과 같다. "),_("br"),t._v(" 우리는 책의 내용을 기억에만 의존하거나(cache), 첫 페이지부터(full-scan) 찾아야 한다. "),_("br"),t._v(" 전화번호의 위치도, 제목도, 사진의 위치도 제각각이다. "),_("br"),t._v("이 책이 전화번호부만큼 두껍다면 정상적으로 원하는 내용을 찾을 수 있을까?\n")]),_("p")])}),[],!1,null,null,null);v.default=a.exports}}]);